struct Interval{
    int size;
    int[size] Keys;
    int[size] Values;
}

Interval InsertInterval(Interval in, int keyBegin, int keyEnd, int Value)
{
    Interval outInterval;
    outInterval.size = in.size;
    outInterval.Keys = in.Keys;
    outInterval.Values = in.Values;

    if(in.size>1)
    	return outInterval;
	else
		return outInterval;

}

void CheckInterval(Interval in)
{
    assert in.size>1;

    for (int i=0; i<in.size-1; i++)
    {
        assert in.Value[i]!=in.Value[i+1] && in.Keys[i]<in.Keys[i+1];
    }

}

void main(Interval in, int keyBegin, int keyEnd, int Value)
{
    Interval outInterval;

    outInterval.size = in.size;
    outInterval.Keys = in.Keys;
    outInterval.Values = in.Values;

    outInterval = outInterval(Interval, keyBegin, keyEnd);

    CheckInterval(outInterval);
}